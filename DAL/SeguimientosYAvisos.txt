



|13/03| - FINAL
-Se creo la clase ClienteRepository con los metodos de la interfaz IGenereicRepository.
Falta completar las que faltan.

-------------------------------------------------------------------------------------------------
|14/03| - CONTINUACION
-Continuar con la creacion de los repositorios que sean necesarios

FINALIZACION -
-QUEDO POR ACLARAR LA RELACION DE LA TABLA SERVICIOS CON VARIOS TIPO SERVICIOS
  entity.HasOne(d => d.TipoServicio).WithMany(p => p.Servicios)
                .HasForeignKey(d => d.TipoServicioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Servicio_TipoServicio");
-HAY ALGO QUE NO CUADRA UN SERVICIO PUEDE TENER VARIOS TIPOSERVICIO Y NO VICEVERSA 
-OBSERVAR QUE SE VIO QUE UNA TABLA DEL LADO DE 'VARIOS' NO PUEDE ESTAR INDEXADO.

-POR OTRO LADO: NO SE DEBE CREAR UN REPOSITORIO POR CADA TABLA DE LA BASE DE DATOS SINO QUE SE JUNTAN AQUELLAS
QUE SON DE 'TIPO RAIZ' Y 'ENTIDAD DEPENDIENTE', BASICAMENTE UNA TABLA QUE ESTA RELACIONADA(Y CONTIENE UN CAMPO DE OTRA)
CON OTRA, SE DEBEN CREAR UN SOLO REPOSITORIO PARA LA TABLA RAIZ.
-TAL VEZ SE TENGA QUE ELIMINAR EL INDICE DE LA PRIMARY KEY DE LA TABLA TIPOSERVICIO

-------------------------------------------------------------------------------------------------------------

------------------>>>>!!!LECTURA OBLIGATORIA:!!!!!<<<<<<<<<<<<

|16/03| - AVISOS
-EVALUAR LAS RELACIONES DE LAS DEMAS TABLAS 
-SE DEJARON REMARCADAS AQUELLAS QUE SE DEBAN EVALUAR O VRIFICAR

CORRECCIONES
-SE CORRIGIO LA RELACION DE SERVICIOS Y TIPOS SERVICIOS 
-PERO FALTA VER LA FUNCIONALDIAD DE LAS DEMAS TABLAS Y SUS RELACIONES Y CUMPLEN CON LA ACCION ESPERADA.

ADVERTENCIAS
-NO SE ELIMINIO EL INDICE DEL CAMPO DE CLAVE PRIMARIA DE LA ENTIDAD DEPENDIENTE DE TIPOSERVICIO.
(NO ES NECESARIO Y CREO PODRIA PRODUCIR INCONCISTENCIAS O DIRECTAMENTE NO ES NECESARIO EL INDICE EN LA ENTIDAD DEPENDIENTE)


-----------------------------------------------------------------------------------------------------------------

|17/03|

REVISIO DE CODIGO SEGUIMIENTO
1️⃣ Crear UnitOfWork en DAL para que BLL use un único contexto.
2️⃣ Desarrollar servicios en BLL (como TurnoService).
3️⃣ Configurar inyección de dependencias en Program.cs para que todo se registre correctamente.

ADVERTENCIAS
-NO SE ELIMINIO EL INDICE DEL CAMPO DE CLAVE PRIMARIA DE LA ENTIDAD DEPENDIENTE DE TIPOSERVICIO.
(NO ES NECESARIO Y CREO PODRIA PRODUCIR INCONCISTENCIAS O DIRECTAMENTE NO ES NECESARIO EL INDICE EN LA ENTIDAD DEPENDIENTE)



----------------------------------------------------------------------------------------------------------------------
[19/03] CORRECCIONES DE CODIGO 
-IMPLEMENTAR UN REPOSITORIO GENERICO PARA NO REPETIR CODIGO EXCESIVO. [hecho]
-MOVER LAS INTERFACES DE DOMAINLAYER A DAL. [hecho]

------------------------------------------------------------------------------------------------------------------------
[13/04] Se Completo la creacion de los repositorios y la clase unidad de trabajo.

----------------------------------------------------------------------------------------------------------------
[6/5/2025]
1-VER DE INCLUIR LOS DATOS DE TIPO SERVICIO A SERVICIO -> VER SI SE DEBE HACER EN EL REPOSITORIO O EN EL CONTROLADOR
2-RELACIONADO CON EL PRIMERO SE DEBE PRESTAR ATENCION A LAS ENTIDADES RELACIONADAS EN ESE CASO INCLUIRKAS EN LA 
RECUPERACION DEL REGISTRO
----------------------------------------------------------------------------------------------------------------
[6/5/2025]
1-REVISAR LAS TABLAS RELACIONADAS Y LOS ENDPOINTS DE TIPOSERVICIO Y SERVICIO
2-CADA TIPOSERVICIO TIENE MULTIPLES SERVICIOS.
----------------------------------------------------------------------------------------------------------------
[13/5/2025] ALERTA- CORREGIR PARA EVITAR FUTUROS PROBLEMAS OCULTOS.
1-En aplicationDbContext se cambio a eliminacion en cascada de la configuracion de la entidad servicio, significa que 
cuando se elimine un tipoServicio tambien se borren los servicios ligados a este por la clave forenea.
2-La alerta que subyace a esta operacion es la de verificar si en la base de datos esta configurada de esa manera(eliminacion 
en cascada) por eso al cambiar la configuracion de tal entudad en ApplicationDbContext se iontento generar una migracion 
para incluir el cambio a la base de datos pero hya un error al intentar iniciar la migracion inicial en DAL/Data.
---------------------------------------------------------------------------------------------------------------
Aviso de nota Anterior-
La migracion se creo ybasicamente es un grupo de comandos que esperan ser ejecutados para realizar cambios en la base de datos
-Por lo que se vio la configuracion de eliminacion en Cascada esta bien realiada pero se dejara la migracion para futuros
cambios o modificaciones.
-MIGRACION ELIMINADA


---------------------------------------------------------
[28/5/2025]
CORREGIR EL TEMA DE MODELSTATEWRAPPER YA QUE EL ENSAMBLADO DE PROGRAM.CS NO LO RECONOCE PARA SU INICIALIZACION
FUERA DE SU ENTORNO.


---------------------------------------------------------
[7/7/25] 
-HUBO CORRECCIONES EN EL SERVICIO ADMINISTRADOR. 
-SE SUGIERE QUE LOS ADMINISTRADORES TENGAS ROLES COMO : superAdmin, editorAdmin, soloLecturaAdmin. para separar responsabilidades.

-Por otro lado, se corrigieron metodos como la de validacion que perseguia una logica incorrecta en la validacion
de los campos de administrador(correo,usuario,contrasenia). [AdministradorServicio.cs]

-Tambien se corrigio el metodo actualizar que no actualizaba los campos editados de admninistrador(usuario, correo, contrasenia)

ESE FUE UN SEGUIMIENTO RAPIDO PARA VERIFICAR QUE TODO SE ENCUENTRE CORRECTAMENTE, AUN HAY MAS POR HACER
LA IA NOS SUGIRIO QUE FALTA VALIDAR USUARIOS POR TOKENS Y/CON JWT, TAMBIEN LA APLICACION DE LOS DTOs PARA DIFERENTES
TIPOS DE VALIDACIONES (CREAR, ACTUALIZAR, DETALLES, INICIAR SESION) 
PERO SE DEBERA TERMINAR CON EL ESQUELETO DEL CRUD DE LA APLICACION
ANTES DE CONTINUAR AVANZANDO CON LA API.

---------------------------------------------------------
[16/7/25]
-Se finalizo con los metodos del servicio de EstadoTurno.

Observaciones, Hay 2:
1-Que el metodo de eliminacion de parte del servicio retorne un bool y true como objeto al tipo OperationResult<T>
me hace un poco de ruido, ver si es mejor retornar el Registro que se elimino, en este caso un objeto de tipo EstadoTurno
o Si es mejor retornar un mensaje que verifique que la eliminacion fue correcta.
2-Por otro lado en los metodos 'Delete' en la implementacion de la clase Generica de 'RepositorioGenerico' observar que 
se realiza una verificacion antes de eliminar el registro de la entidad, estoy seguro que va encontra de la responsabilidad 
de un repositorio que solo debe efectuar los cambios en la base de datos sin codigo extra que verifique si esos datos
existen o no.

---------------------------------------------------------
[17/7/25]
-Se corrigio el principio de responsabildiad unica para los metodos 'Delete' del repositorio generico.

Observaciones: Hay varias...
1-Al crear el servicio de HistorialTurno surgio el problema que este servicio no deberia ocntar con metodos CRUDs
basicos sino que sus metodos son mas especificos con respecto a los cambios que se realizan en la tabla turnos y
quien las realizo, por ejemplo se registra en cada cambio del estadoTurno de la tabla turno por medio de la tabla
historialTurno quien realizo(administrador) tales cambios de estado o de fecha en caso de que se reprograme el turno...

---------------------------------------------------------
[18/7/25]
-Observacion del flujo del funcionamiento de la capa de servicio de turno, cuyo servicio debe aplicar la capa unitOfwork
obteniendo como resultado realizar los registros en la tabla historialturno... 
-Esta observacion implico que se realicen los cambios correspondientes de la interfaz 'HistorialTurno', por hallarse
que se encontraban con metodos que no correspondian a su funcionamiento simple o que solo debian retornar una lista
de registros o un simple registro(HttpGet).

---------------------------------------------------------
[27/7/25]
-Se procede con los siguientes servicios [Servicio, TipoServicio, Turno]
-Servicio:"Completado<Servicio,Interfaz>", Observar:"Las conversiones de los tipos int a string en el metodo que Valida y el los  
                                  metodos que usa el metodo de validacion".

-TipoServicio:"Completado<Servicio,Interfaz>".

---------------------------------------------------------
[28/7/25]
-Turno: "Incompleto", Interfaz En proceso-Verificar

---------------------------------------------------------
[29/7/25]
-Turno: "TurnoServicio: En Curso"
-Cambios y Observaciones: "Hay que agregar un campo de HoraTurno en la tabla de turno de la base de datos".
"Ver de agregarlo desde el Modelo con migraciones de EntityFrameworkCore".

---------------------------------------------------------
[30/7/25]
-Turno:COntinuamos con el servicio de Turnos.
-Hubo varios cambios realizados en la base de datos: 
                                   1.Se agrego el campo HoraTuno a la tabla de turno
                                   2.Se tuvo que cambiar el tipo de dato de fehca de DateTime a DateOnly.
                      [ATENCION]   3.No se actualizo el 'ApplicationDbContext' luego del cambio del tipo de 
                                   dato especificado en el item (2).
           [ATENCION] [FINALIZADO] 4.Tabla 'HistorialTurno' en el campo FechaCambio no se cambio el tipo
                                   de dato -> Cambiar de DateTime a DateOnly.
           [ATENCION] [FINALIZADO] 5.Se realizaron varios cambios en la base de datos sobre todo en la tabla
                                   'HistorialTurno' SE DEBE REALIZAR DE NUEVO el Scaffolding!


---------------------------------------------------------
[31/7/25]
-Se realizaron los cambios correspondientes al dia de ayer.
-FALTA EL METODO COMMIT EN LA CLASE UNITOFWORK. [COMPLETADO] 

---------------------------------------------------------
[31/7/25]
-Se realizaron los cambios correspondientes al dia de ayer de la Clase UnitOfWork.
-Ver FluentValidation, ya que se cometieron errores en la validacion de los datos del turno...
-Ver TurnoServicio.cs junto con su Interfaz, y ver los datos que demanda el modelo de Turno.

---------------------------------------------------------
[4/7/25]
-Ver archivo 'TurnoServicio.cs' linea 166, hay un detalle, cuando se cambia la fecha y la hora de un turno 
ver si el estado del turno tambien hay que cambiarlo por el hecho de que se realiza un cambio de fecha y hora
sin cambio de estadoTurno.

---------------------------------------------------------
[13/8/25]
-Se modifico dos metodos de la interfaz de AdministradorServicio tanto en la interfaz como en los metodos del
servicio se realizaron los cambios correspondientes...
[CONTINUAR CON LA CORRECCION DE LOS DEMAS SERVICIOS JUNTO CON SUS INTERFACES]

---------------------------------------------------------
[15/8/25]
-VER ClienteController.cs en el metodo 'AgregarCliente' hay que correguir el badRequest y el control de excepciones
que se esta realizando en el servicio. Ver bien eso y corregir. [PENDIENTE-INCOMPLETO].






[SECCION ESTATICA]
-------------------------------------------------------
INTRODUCCION A LA SECCION ESTATICA:
-ESTA SECCION CONTIENE LAS ESPECIFICACIONES Y TIPS MAS GENERALES QUE FALTAN COMPLETAR EN LA API EN GENERAL.
-TAREAS GENERALES Y TRANSFERENCIA DE DATOS QUE IMPLICARIAN MAS DE UNA TABLA.
-IMPLEMENTACIONES Y METODOS IMPORTANTES.

A-Servicio Turno: Servicio del cual debe implementar la arquitectura UnirOfWork en ella, para generar
los cambios en las tablas 'Turnos' e 'HistorialTurno'.





